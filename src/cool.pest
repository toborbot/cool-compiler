formfeed = { '\u{0C}'..'\u{0C}' }
vertical_tab = { '\u{0B}'..'\u{0B}' }
double_quote = { "\"" }

WHITESPACE = _{ " " | "\t" | "\r" | formfeed | vertical_tab | NEWLINE }
COMMENT = _{ "(*" ~ (!"*)" ~ ( COMMENT | ANY ) )* ~ "*)" }

line_comment = @{ "--" ~ (!NEWLINE ~ ANY)* }
error_eof_in_comment = @{ "(*" ~ (!EOI ~ ANY)* ~ EOI }
error_unclosed_comment = { "*)" }

/* CONSTANTS */
escaped_tab = { "\\t" }
escaped_backspace = { "\\b" }
escaped_newline = { "\\n" }
escaped_formfeed = { "\\f" }
escaped_quote = { "\\\"" }
escaped_backslash =  { "\\\\" }
multiline = { "\\\n" }

word = { !"\"" ~ !("\n") ~ ANY}
inner_str = ${
    (
    escaped_tab |
    escaped_backspace |
    escaped_newline |
    escaped_formfeed |
    escaped_quote |
    escaped_backslash |
    multiline |
    "\\"? ~ word
    )*
}

error_eof_in_str = ${ double_quote ~ inner_str ~ EOI }
error_unterminated_str = ${ double_quote ~ inner_str ~ "\n" }
str_const = ${ double_quote ~ inner_str ~ double_quote }

true = @{ "t" ~ ^"rue" }
false = @{ "f" ~ ^"alse" }
bool_const = { true | false }
bool_const_t = ${ bool_const ~ !id_char }

int_const = { ('0'..'9')+ }

/* KEYWORDS */
id_char = { "_" | ASCII_ALPHANUMERIC }

class = { ^"class" }
class_t = ${ class ~ !id_char }

else = { ^"else" }
else_t = ${ else ~ !id_char }

if = { ^"if" }
if_t = ${ if ~ !id_char }

inherits = { ^"inherits" }
inherits_t = ${ inherits ~ !id_char }

let = { ^"let" }
let_t = ${ let ~ !id_char}

in = { ^"in" }
in_t = ${ in ~ !id_char}

loop = { ^"loop" }
loop_t = ${ loop ~ !id_char }

pool = { ^"pool" }
pool_t = ${ pool ~ !id_char}

then = { ^"then" }
then_t = ${ then ~ !id_char}

while = { ^"while" }
while_t = ${ while ~ !id_char }

case = { ^"case" }
case_t = ${ case ~ !id_char }

esac = { ^"esac" }
esac_t = ${ esac ~ !id_char }

of = { ^"of" }
of_t = ${ of ~ !id_char}

new = { ^"new" }
new_t = ${ new ~ !id_char }

isvoid = { ^"isvoid" }
isvoid_t = ${ isvoid ~ !id_char }

not = { ^"not" }
not_t = ${ not ~ !id_char }

keyword = {
        class_t |
        else_t |
        if_t |
        inherits_t |
        let_t |
        in_t |
        loop_t |
        pool_t |
        then_t |
        while_t |
        case_t |
        esac_t |
        of_t |
        new_t |
        isvoid_t |
        not_t
}

/* Identifiers */
typeid = @{ 'A'..'Z' ~ id_char* }
objectid = @{ 'a'..'z' ~ id_char* }
identifier = { typeid | objectid }

/* Operators */
operator = {
         "<-" | "+" | "-" | "*" | "/" | "." | "~" | "@" | "=" | "<" | "<=" 
}

/* Symbols */
symbol = {
     "{" | "}" | ":" | ";" | "(" | ")" | ","
}

error_invalid_char = { "\\" }
unknown_error = { ANY }

token = {
      error_eof_in_comment |
      error_unclosed_comment |
      error_eof_in_str |
      error_unterminated_str |
      str_const |
      bool_const_t |
      int_const |
      keyword |
      identifier |
      operator |
      symbol |
      error_invalid_char |
      unknown_error
}

file = _{ SOI ~ (line_comment | token )* }