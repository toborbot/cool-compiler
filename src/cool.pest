formfeed = { '\u{0C}'..'\u{0C}' }
vertical_tab = { '\u{0B}'..'\u{0B}' }
double_quote = { "\"" }
             
COMMENT = _{ "(*" ~ (!"*)" ~ ( COMMENT | ANY ) )* ~ "*)" }
WHITESPACE = _{ " " | "\t" | "\r" | formfeed | vertical_tab | NEWLINE }

line_comment = @{ "--" ~ (!NEWLINE ~ ANY)* }
error_eof_in_comment = @{ "(*" ~ (!EOI ~ ANY)* ~ EOI }
error_unclosed_comment = { "*)" }

/* CONSTANTS */
escaped_tab = { "\\t" }
escaped_backspace = { "\\b" }
escaped_newline = { "\\n" }
escaped_formfeed = { "\\f" }
escaped_quote = { "\\\"" }
escaped_backslash =  { "\\\\" }
multiline = { "\\\n" }

word = { !"\"" ~ !("\n") ~ ANY}
inner_str = ${
    (
    escaped_tab |
    escaped_backspace |
    escaped_newline |
    escaped_formfeed |
    escaped_quote |
    escaped_backslash |
    multiline |
    "\\"? ~ word
    )*
}

error_eof_in_str = ${ double_quote ~ inner_str ~ EOI }
error_unterminated_str = ${ double_quote ~ inner_str ~ "\n" }
str_const = ${ double_quote ~ inner_str ~ double_quote }

true = @{ "t" ~ ^"rue" }
false = @{ "f" ~ ^"alse" }
bool_const = ${ true | false ~ !id_char }
int_const = @{ ('0'..'9')+ }

/* KEYWORDS */
id_char = { "_" | ASCII_ALPHANUMERIC }

class = @{ ^"class" ~ !id_char }
else = @{ ^"else" ~ !id_char }
if = @{ ^"if" ~ !id_char }
fi = @{ ^"fi" ~ !id_char }
inherits = @{ ^"inherits" ~ !id_char }
let = @{ ^"let" ~ !id_char}
in = @{ ^"in" ~ !id_char}
loop = @{ ^"loop" ~ !id_char }
pool = @{ ^"pool" ~ !id_char}
then = @{ ^"then" ~ !id_char}
while = @{ ^"while" ~ !id_char }
case = @{ ^"case" ~ !id_char }
esac = @{ ^"esac" ~ !id_char }
of = @{ ^"of" ~ !id_char}
new = @{ ^"new" ~ !id_char }
isvoid = @{ ^"isvoid" ~ !id_char }
not = @{ ^"not" ~ !id_char }

keyword = {
        class | else | if | fi | inherits | let | in | loop | pool | then | while | case | esac | of | new | isvoid | not
        }

/* Identifiers */
typeid = @{ 'A'..'Z' ~ id_char* }
objectid = @{ 'a'..'z' ~ id_char* }
identifier = { typeid | objectid }

/* Operators */
operator = {
         "<-" | "<=" | "=>" | "+" | "-" | "*" | "/" | "." | "~" | "@" | "=" | "<"
         }

/* Symbols */
symbol = {
     "{" | "}" | ":" | ";" | "(" | ")" | ","
     }

error_invalid_char = { "\\" }
unknown_error = { ANY }

token = {
      error_eof_in_comment |
      error_unclosed_comment |
      error_eof_in_str |
      error_unterminated_str |
      str_const |
      bool_const |
      int_const |
      keyword |
      identifier |
      operator |
      symbol |
      error_invalid_char |
      unknown_error
      }

file = _{ SOI ~ (line_comment | token )* }